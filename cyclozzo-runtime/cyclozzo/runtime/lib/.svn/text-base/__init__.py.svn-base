import re
import logging
import logging.handlers
import datetime

import cloghandler
from cyclozzo.runtime.model import Activity, User
from cyclozzo.sdk import db

log = logging.getLogger(__name__)

ip_pattern = re.compile('(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)')
def is_ip_private(str):
    if re.match(ip_pattern, str):
        return True
    else:
        return False 

class_A_pattern = re.compile('(^10\.)')
class_B_pattern = re.compile('(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)')
class_C_pattern = re.compile('(^192\.168\.)')

def get_ip_class(str):
    if not is_ip_private(str): return None
    if re.match(class_A_pattern, str): return 'class A'
    if re.match(class_B_pattern, str): return 'class B'
    if re.match(class_C_pattern, str): return 'class C'
    return 'localhost'

def enable_log(output_path, debug = True, 
			format = '%(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s', 
			dateformat = '%H:%M:%S',
			rotating = True, 
			size = 1024 * 1024, 
			copies = 5):
	root = logging.getLogger()
	if debug:
		root.setLevel(logging.DEBUG)
	else:
		root.setLevel(logging.INFO)
		
	formatter = logging.Formatter(format, dateformat)
	
	if rotating:
		handler = cloghandler.ConcurrentRotatingFileHandler(
						output_path, maxBytes=size, backupCount=copies)
	else:
		handler = logging.handlers.FileHandler(output_path)
	handler.setFormatter(formatter)
	
	root.addHandler(handler)
	root.info('logging facility to "%s"' % output_path)
	root.debug('logger options: debug=%s size=%d copies=%d rotating=%s' % \
			(debug, size, copies, rotating) )
			
def start_activity(server, description, owner):
	act = Activity(server = server, description = description)
	act.start_time = datetime.datetime.now()
	act.status = 1
	act.proc_id = -1
	act.owner = owner
	act.save(db.Model.new_key())
	return act