'''
Cyclozzo Balancer API client library
@author: Stanislav Yudin
'''
import os, logging, socket, proto
from cyclozzo.sdk.app import get_yaml
from cyclozzo.runtime.lib import balancer_pb2
from cyclozzo.runtime.lib.balancer_pb2 import *

log = logging.getLogger(__name__)
	
class BalancerProxy(object):
	'''
	Class provides short-cut methods
	to work with running satellite instance
	'''
	
	def __async_callback(self, data):
		pass		
	
	def __init__(self, target_address, port = 8881):
		'''
		Creates rpc proxy to target server
		rarget is cyclozzo.runtime.model.srv.Server
		'''
		self.target_address = target_address
		log.info('getting balancer rpc to %s:%s' % (self.target_address, port))
		self.stub = Cyclozzo_Balancer_Stub(proto.ProtoChannel(self.target_address, port, balancer_pb2))
		self.controller = proto.ProtoController()

	def close(self):
		self.stub.rpc_channel.sock.close()
	
	def list_instances(self, limit = 0):
		log.info('quering instances from %s' % self.target_address)
		req = BLNS_ListInstances()
		req.limit = limit
		resp = self.stub.list_instances(self.controller, req, self.__async_callback)
		log.info('%d instances found' % len(resp.instances))
		return resp.instances
	
	def add_instance(self, app_instance):
		log.info('adding instance %s to balancer' % app_instance.key())
		request = BLNS_AddInstance()
		request.app_key = str(app_instance.app.key())
		request.inst_key = str(app_instance.key())
		request.inst_ip_addr = app_instance.server.get_main_nic_text()
		request.server_label = app_instance.server.name
		request.inst_port = app_instance.port
		request.public_address = app_instance.app.public_interface.ip_address
		
		resp = self.stub.add_instance(self.controller, request, self.__async_callback)
		if resp.op_code == 0:
			log.info('new instance successfully assigned to balancer')
			return True
		else:
			log.error('failed to assign instance to balancer')
			return False
	
	def remove_instance(self, inst_key):
		log.info('removing %s from balancer' % inst_key)
		req = BLNS_RemoveInstance(inst_key = str(inst_key) )
		
		resp = self.stub.remove_instance(self.controller, req, self.__async_callback)
		if resp.op_code == 0:
			log.info('%s was removed from balancing' % inst_key)
		if resp.op_code == -2:
			log.warn('%s was not found on balancer' % inst_key)
		return resp

	def disable_application(self, app_key):
		log.info('disabling application with key %s' % app_key)
		req = BLNS_DisableApplication(app_key = str(app_key) )
		resp = self.stub.disable_application(self.controller, req, self.__async_callback)
		if resp.op_code == 0:
			log.info('%s was disabled on balancer' % app_key)
		return resp.op_code == 0

	def enable_application(self, app_key):
		log.info('enabling application with key %s' % app_key)
		req = BLNS_EnableApplication(app_key = str(app_key))
			
		resp = self.stub.enable_application(self.controller, req, self.__async_callback)
		if resp.op_code == 0:
			log.info('%s was enabled on balancer' % app_key)
		return resp.op_code == 0	