'''
Cyclozzo Monitoring Daemon
@author: Stanislav Yudin
'''
import sys
import os
import time
import threading
import socket
import logging, datetime
import uuid, base64
import smtplib
import logging
import errno
from email.mime.text import MIMEText
from proto.daemon import Daemon
from optparse import OptionParser
from cyclozzo.sdk.app.config import ApplicationConfiguration
from cyclozzo.runtime import lib

log = logging.getLogger('monitor')

email_notification_template = '''
<html>
	<body>
		<h1>Service %s has changed status to %s</h1>
	</body>
</html>
'''

states2str = {
	0 : 'stopped',
	1 : 'running'
}

def pid_exists(pid):
	log.debug('checking pid %d' % pid)
	if pid < 0:
		return False
	try:
		os.kill(pid, 0)
	except OSError, e:
		return e.errno == errno.EPERM
	else:
		return True

def get_pid_for(logdir, svc):
		pid_path = os.path.join(logdir, '%s.pid' % svc)
		pid = -1
		if os.path.exists(pid_path):
			f = open(pid_path, 'r')
			pid = int(f.readline())
			f.close()
			log.debug('read pid %d from %s' % (pid, pid_path))
		return pid

class Monitor(Daemon):
	def __init__(self, pidfile, cfg):
		Daemon.__init__(self, pidfile = pidfile)
		self.cfg = cfg
		
	def monitor_services(self, services = []):
		while True:
			for svc in services:
				pid = get_pid_for(self.cfg.logdir, svc)
				#get new status
				if pid > 0 and pid_exists(pid):
					nst = 1
				else:
					nst = 0
				st = self.status[svc]	
				if st > nst:
					#was running, now stopped
					log.error('service %s suddenly went away' % svc)
					self.report_change(svc, states2str[0])
				elif nst > st:
					#was stopped, now running
					log.warn('service %s is running now!' % svc)
				else:
					log.info('service %s is still %s' % (svc, states2str[nst]))
				#save new status
				self.status[svc] = nst
			time.sleep(self.cfg.period)
						
	def run(self, debug = False):
		lib.enable_log(os.path.join(self.cfg.logdir, 'monitor.log'))

		#build initial status
		log.info('Building initial status')
		self.status = {}
		for svc in self.cfg.monitor:
			pid = get_pid_for(self.cfg.logdir, svc)
			if pid > 0 and pid_exists(pid):
				log.info('service %s is running' % svc)
				self.status[svc] = 1
			else:
				log.warn('service %s is stopped' % svc)
				self.status[svc] = 0
		
		#start monitoring
		if debug: 
			self.monitor_services(self.cfg.monitor)
		else:
			try:
				self.monitor_services(self.cfg.monitor)
			except Exception, ex:
				log.fatal('Fatal Exception: %s' % ex)
				raise ex
				
	def report_change(self, svc, state):
		msg = MIMEText(email_notification_template % (svc.capitalize(), state), 'html')
		msg['Subject'] = 'Cyclozzo Monitoring Report'
		msg['From'] = self.cfg.email_from
		msg['To'] = ', '.join(self.cfg.receivers)
		log.debug('sending email from "%s" to %s via %s:%d' % (self.cfg.email_from, 
			repr(self.cfg.receivers), self.cfg.smtp_host, self.cfg.smtp_port))
		try:
			service = smtplib.SMTP(self.cfg.smtp_host, self.cfg.smtp_port)
			service.sendmail(self.cfg.email_from, self.cfg.receivers, msg.as_string())
			service.quit()
		except Exception, ex:
			log.error('Failed to report service change notification. SMTP problem: %s' % repr(ex))
			
def main():
	print 'Cyclozzo Monitoring Service'
	print 'Copyright K7 Computing 2009-2011.'
	print
	parser = OptionParser()
	
	parser.add_option("--status", action="store_true", default=False,
						help="Checks if monitoring service is running")
	parser.add_option("-s", "--start", action="store_true", default=False,
						help="Sends START command. Option --notify is required to provide a list of receivers")
	parser.add_option("-d", "--debug", action="store_true", default=False,
						help="Sends START command with DEBUG flag.Option --notify is required to provide a list of receivers")
	parser.add_option("-t", "--stop", action="store_true", default=False, 
						help="Sends STOP command: --stop ")

	(options, args) = parser.parse_args()
	
	conf_path = os.path.join(os.path.dirname(lib.__file__), 'monitor.yaml')
	conf = ApplicationConfiguration(conf_path)
	if options.status:
		print 'Monitor status report:'
		dp = os.path.join(conf.logdir, 'monitor.pid')
		if os.path.exists(dp):
			f = open(dp, 'r')
			dpid = int(f.readline())
			f.close()
			print 'Monitor is running with pid: %d.' % dpid
		else:
			print 'Monitor is stopped.'

	elif options.start or options.debug or options.stop:
		if options.start or options.debug:
			for r in conf.receivers:
				if '@' not in r or '.' not in r:
					print 'Error: Invalid email address specified: %s' % r
					parser.print_help()
					sys.exit(1)
			
			mon = Monitor(os.path.join(conf.logdir, 'monitor.pid'), conf)
			if options.start:
				print 'Starting Monitoring Daemon'
				mon.start()
			elif options.debug:
				print 'Debugging Monitoring Daemon'
				mon.run(debug = True)
				
		elif options.stop:
			print 'Stopping Monitoring Daemon'
			mon = Monitor(os.path.join(conf.logdir, 'monitor.pid'), conf)
			mon.stop()	
	else:
		parser.print_help()
		sys.exit(1)
	
if __name__ == '__main__':
	main()